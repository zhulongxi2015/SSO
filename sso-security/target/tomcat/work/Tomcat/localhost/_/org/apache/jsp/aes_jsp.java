/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/7.0.47
 * Generated at: 2018-06-20 14:09:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class aes_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8\">\r\n");
      out.write("    <title>AES算法</title>\r\n");
      out.write("    <script src=\"/js/jquery.min.js\"></script>\r\n");
      out.write("    <script src=\"/js/aes.min.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("    \t// 随机数生成算法。 len-生成结果的长度， radix-生成结果的组成，是二进制，十进制还是十六进制数。\r\n");
      out.write("\t    function uuid(len, radix) {\r\n");
      out.write("\t        var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');\r\n");
      out.write("\t        var uuid = [], i;\r\n");
      out.write("\t        radix = radix || chars.length;\r\n");
      out.write("\t     \r\n");
      out.write("\t        if (len) {\r\n");
      out.write("\t          // Compact form\r\n");
      out.write("\t          for (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\r\n");
      out.write("\t        } else {\r\n");
      out.write("\t          // rfc4122, version 4 form\r\n");
      out.write("\t          var r;\r\n");
      out.write("\t     \r\n");
      out.write("\t          // rfc4122 requires these characters\r\n");
      out.write("\t          uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\r\n");
      out.write("\t          uuid[14] = '4';\r\n");
      out.write("\t     \r\n");
      out.write("\t          // Fill in random data.  At i==19 set the high bits of clock sequence as\r\n");
      out.write("\t          // per rfc4122, sec. 4.1.5\r\n");
      out.write("\t          for (i = 0; i < 36; i++) {\r\n");
      out.write("\t            if (!uuid[i]) {\r\n");
      out.write("\t              r = 0 | Math.random()*16;\r\n");
      out.write("\t              uuid[i] = chars[(i == 19) ? (r & 0x3) | 0x8 : r];\r\n");
      out.write("\t            }\r\n");
      out.write("\t          }\r\n");
      out.write("\t        }\r\n");
      out.write("\t     \r\n");
      out.write("\t        return uuid.join('');\r\n");
      out.write("\t    }\r\n");
      out.write("        /*\r\n");
      out.write("         * 加密函数\r\n");
      out.write("         * message - 明文数据\r\n");
      out.write("         * key - 密钥\r\n");
      out.write("         */\r\n");
      out.write("         function encryptByAES(message, key){\r\n");
      out.write("       \t    var keyHex = CryptoJS.enc.Utf8.parse(key);\r\n");
      out.write("       \t    var srcs = CryptoJS.enc.Utf8.parse(message);\r\n");
      out.write("       \t    var encrypted = CryptoJS.AES.encrypt(srcs, keyHex, {\r\n");
      out.write("       \t    \tmode:CryptoJS.mode.ECB,\r\n");
      out.write("       \t    \tpadding: CryptoJS.pad.Pkcs7\r\n");
      out.write("       \t    });\r\n");
      out.write("       \t    return encrypted.toString();\r\n");
      out.write("       \t}\r\n");
      out.write("\t\t\r\n");
      out.write("        /*\r\n");
      out.write("         * 解密函数\r\n");
      out.write("         * ciphertext - 要解密的密文。\r\n");
      out.write("         */\r\n");
      out.write("         function decryptByAES(ciphertext, key){\r\n");
      out.write("       \t    var keyHex = CryptoJS.enc.Utf8.parse(key);\r\n");
      out.write("       \t    var decrypt = CryptoJS.AES.decrypt(ciphertext, keyHex, {\r\n");
      out.write("       \t    \tmode:CryptoJS.mode.ECB,\r\n");
      out.write("       \t    \tpadding: CryptoJS.pad.Pkcs7\r\n");
      out.write("       \t    });\r\n");
      out.write("       \t    return CryptoJS.enc.Utf8.stringify(decrypt).toString();\r\n");
      out.write("       \t}\r\n");
      out.write("        \r\n");
      out.write("        function doPost(){\r\n");
      out.write("        \tvar name = $(\"#nameText\").val();\r\n");
      out.write("        \tvar password = $(\"#passwordText\").val();\r\n");
      out.write("        \tvar message = name + password;\r\n");
      out.write("        \tvar key = uuid(32,16);\r\n");
      out.write("        \tvar param = {};\r\n");
      out.write("        \tparam.name=name;\r\n");
      out.write("        \tparam.password=password;\r\n");
      out.write("        \tparam.key=key;\r\n");
      out.write("        \t// 正确的加密\r\n");
      out.write("        \tparam.message = encryptByAES(message, key);\r\n");
      out.write("        \t// 测试解密错误，如：请求拦截。\r\n");
      out.write("        \t// param.message = \"WrongSecurityMessage00\";\r\n");
      out.write("        \t// 测试异常情况。AES加密后的密文数据长度一定是8的整数倍。\r\n");
      out.write("        \t// param.message = \"testException\";\r\n");
      out.write("        \t$.ajax({\r\n");
      out.write("        \t\t'url':'/testAes',\r\n");
      out.write("        \t\t'data':param,\r\n");
      out.write("        \t\t'success':function(data){\r\n");
      out.write("        \t\t\tif(data){\r\n");
      out.write("        \t\t\t\talert(\"密文：\"+data.securityMessage+\"；key：\"+data.key);\r\n");
      out.write("        \t\t\t\tvar respMsg = decryptByAES(data.securityMessage, data.key);\r\n");
      out.write("        \t\t\t\talert(respMsg);\r\n");
      out.write("        \t\t\t}else{\r\n");
      out.write("        \t\t\t\talert(\"服务器忙请稍后重试!\");\r\n");
      out.write("        \t\t\t}\r\n");
      out.write("        \t\t}\r\n");
      out.write("        \t});\r\n");
      out.write("        }\r\n");
      out.write("\r\n");
      out.write("    </script>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\t<center>\r\n");
      out.write("\t\t<table>\r\n");
      out.write("\t\t\t<caption>AES安全测试</caption>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: right; padding-right: 5px\">\r\n");
      out.write("\t\t\t\t\t姓名：\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: left; padding-left: 5px\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"name\" id=\"nameText\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: right; padding-right: 5px\">\r\n");
      out.write("\t\t\t\t\t密码：\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: left; padding-left: 5px\">\r\n");
      out.write("\t\t\t\t\t<input type=\"text\" name=\"password\" id=\"passwordText\"/>\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td style=\"text-align: right; padding-right: 5px\" colspan=\"2\">\r\n");
      out.write("\t\t\t\t\t<input type=\"button\" value=\"测试\" onclick=\"doPost();\" />\r\n");
      out.write("\t\t\t\t</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t</center>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
